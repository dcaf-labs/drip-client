/* tslint:disable */
/* eslint-disable */
/**
 * Drip Backend
 * Drip backend service. All API\'s have a IP rate limit of 10 requests per second. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mocha@dcaf.so
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MintRequest,
    MintRequestFromJSON,
    MintRequestToJSON,
    MintResponse,
    MintResponseFromJSON,
    MintResponseToJSON,
    PingResponse,
    PingResponseFromJSON,
    PingResponseToJSON,
    Position,
    PositionFromJSON,
    PositionToJSON,
    ProtoConfig,
    ProtoConfigFromJSON,
    ProtoConfigToJSON,
    SwapConfig,
    SwapConfigFromJSON,
    SwapConfigToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
    TokenPair,
    TokenPairFromJSON,
    TokenPairToJSON,
    TokenSwap,
    TokenSwapFromJSON,
    TokenSwapToJSON,
    Vault,
    VaultFromJSON,
    VaultToJSON,
    VaultPeriod,
    VaultPeriodFromJSON,
    VaultPeriodToJSON,
} from '../models';

export interface MintPostRequest {
    mintRequest: MintRequest;
}

export interface PositionsGetRequest {
    wallet: string;
}

export interface ProtoconfigsGetRequest {
    tokenA?: string;
    tokenB?: string;
}

export interface SwapConfigsGetRequest {
    vault?: string;
}

export interface SwapsGetRequest {
    tokenPair?: string;
}

export interface TokenpairsGetRequest {
    tokenA?: string;
    tokenB?: string;
}

export interface TokensGetRequest {
    tokenA?: string;
    tokenB?: string;
}

export interface VaultperiodsGetRequest {
    vault: string;
    vaultPeriod?: string;
    offset?: number;
    limit?: number;
}

export interface VaultsGetRequest {
    tokenA?: string;
    tokenB?: string;
    protoConfig?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * mint test tokens to a desired associated token account, or passed in token account
     * Mint tokens (DEVNET ONLY)
     */
    async mintPostRaw(requestParameters: MintPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MintResponse>> {
        if (requestParameters.mintRequest === null || requestParameters.mintRequest === undefined) {
            throw new runtime.RequiredError('mintRequest','Required parameter requestParameters.mintRequest was null or undefined when calling mintPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MintRequestToJSON(requestParameters.mintRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MintResponseFromJSON(jsonValue));
    }

    /**
     * mint test tokens to a desired associated token account, or passed in token account
     * Mint tokens (DEVNET ONLY)
     */
    async mintPost(requestParameters: MintPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MintResponse> {
        const response = await this.mintPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all user positions.
     * Get User Positions
     */
    async positionsGetRaw(requestParameters: PositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Position>>> {
        if (requestParameters.wallet === null || requestParameters.wallet === undefined) {
            throw new runtime.RequiredError('wallet','Required parameter requestParameters.wallet was null or undefined when calling positionsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.wallet !== undefined) {
            queryParameters['Wallet'] = requestParameters.wallet;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PositionFromJSON));
    }

    /**
     * Get all user positions.
     * Get User Positions
     */
    async positionsGet(requestParameters: PositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Position>> {
        const response = await this.positionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all proto configs with filters.
     * Get Proto Configs
     */
    async protoconfigsGetRaw(requestParameters: ProtoconfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<ProtoConfig>>> {
        const queryParameters: any = {};

        if (requestParameters.tokenA !== undefined) {
            queryParameters['tokenA'] = requestParameters.tokenA;
        }

        if (requestParameters.tokenB !== undefined) {
            queryParameters['tokenB'] = requestParameters.tokenB;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/protoconfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtoConfigFromJSON));
    }

    /**
     * Get all proto configs with filters.
     * Get Proto Configs
     */
    async protoconfigsGet(requestParameters: ProtoconfigsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<ProtoConfig>> {
        const response = await this.protoconfigsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ping api.
     * Health Check
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PingResponseFromJSON(jsonValue));
    }

    /**
     * Ping api.
     * Health Check
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PingResponse> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Swagger spec
     */
    async swaggerJsonGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swagger.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Swagger spec
     */
    async swaggerJsonGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.swaggerJsonGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get token swap configs fro triggerDCA.
     * Get Token Swaps Configs
     */
    async swapConfigsGetRaw(requestParameters: SwapConfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<SwapConfig>>> {
        const queryParameters: any = {};

        if (requestParameters.vault !== undefined) {
            queryParameters['vault'] = requestParameters.vault;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swapConfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SwapConfigFromJSON));
    }

    /**
     * Get token swap configs fro triggerDCA.
     * Get Token Swaps Configs
     */
    async swapConfigsGet(requestParameters: SwapConfigsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<SwapConfig>> {
        const response = await this.swapConfigsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get token swaps with filters.
     * Get Token Swaps
     */
    async swapsGetRaw(requestParameters: SwapsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TokenSwap>>> {
        const queryParameters: any = {};

        if (requestParameters.tokenPair !== undefined) {
            queryParameters['tokenPair'] = requestParameters.tokenPair;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swaps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenSwapFromJSON));
    }

    /**
     * Get token swaps with filters.
     * Get Token Swaps
     */
    async swapsGet(requestParameters: SwapsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TokenSwap>> {
        const response = await this.swapsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get token pairs with filters.
     * Get Token Pairs
     */
    async tokenpairsGetRaw(requestParameters: TokenpairsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TokenPair>>> {
        const queryParameters: any = {};

        if (requestParameters.tokenA !== undefined) {
            queryParameters['tokenA'] = requestParameters.tokenA;
        }

        if (requestParameters.tokenB !== undefined) {
            queryParameters['tokenB'] = requestParameters.tokenB;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokenpairs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenPairFromJSON));
    }

    /**
     * Get token pairs with filters.
     * Get Token Pairs
     */
    async tokenpairsGet(requestParameters: TokenpairsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TokenPair>> {
        const response = await this.tokenpairsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tokens with filters.
     * Get Tokens
     */
    async tokensGetRaw(requestParameters: TokensGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Token>>> {
        const queryParameters: any = {};

        if (requestParameters.tokenA !== undefined) {
            queryParameters['tokenA'] = requestParameters.tokenA;
        }

        if (requestParameters.tokenB !== undefined) {
            queryParameters['tokenB'] = requestParameters.tokenB;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenFromJSON));
    }

    /**
     * Get tokens with filters.
     * Get Tokens
     */
    async tokensGet(requestParameters: TokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Token>> {
        const response = await this.tokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get vault periods with pagination and filters.
     * Get Vault Periods
     */
    async vaultperiodsGetRaw(requestParameters: VaultperiodsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<VaultPeriod>>> {
        if (requestParameters.vault === null || requestParameters.vault === undefined) {
            throw new runtime.RequiredError('vault','Required parameter requestParameters.vault was null or undefined when calling vaultperiodsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.vault !== undefined) {
            queryParameters['vault'] = requestParameters.vault;
        }

        if (requestParameters.vaultPeriod !== undefined) {
            queryParameters['vaultPeriod'] = requestParameters.vaultPeriod;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vaultperiods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VaultPeriodFromJSON));
    }

    /**
     * Get vault periods with pagination and filters.
     * Get Vault Periods
     */
    async vaultperiodsGet(requestParameters: VaultperiodsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<VaultPeriod>> {
        const response = await this.vaultperiodsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all vaults with filters.
     * Get Supported Vaults
     */
    async vaultsGetRaw(requestParameters: VaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Vault>>> {
        const queryParameters: any = {};

        if (requestParameters.tokenA !== undefined) {
            queryParameters['tokenA'] = requestParameters.tokenA;
        }

        if (requestParameters.tokenB !== undefined) {
            queryParameters['tokenB'] = requestParameters.tokenB;
        }

        if (requestParameters.protoConfig !== undefined) {
            queryParameters['protoConfig'] = requestParameters.protoConfig;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VaultFromJSON));
    }

    /**
     * Get all vaults with filters.
     * Get Supported Vaults
     */
    async vaultsGet(requestParameters: VaultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Vault>> {
        const response = await this.vaultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
