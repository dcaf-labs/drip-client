/* tslint:disable */
/* eslint-disable */
/**
 * Drip Backend
 * Drip backend service. All API\'s have a IP rate limit of 10 requests per second. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mocha@dcaf.so
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenSwap
 */
export interface TokenSwap {
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    pubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    mint: string;
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    authority: string;
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    feeAccount: string;
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    tokenAAccount: string;
    /**
     * 
     * @type {string}
     * @memberof TokenSwap
     */
    tokenBAccount: string;
    /**
     * token pair reference identifier
     * @type {string}
     * @memberof TokenSwap
     */
    pair: string;
}

/**
 * Check if a given object implements the TokenSwap interface.
 */
export function instanceOfTokenSwap(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pubkey" in value;
    isInstance = isInstance && "mint" in value;
    isInstance = isInstance && "authority" in value;
    isInstance = isInstance && "feeAccount" in value;
    isInstance = isInstance && "tokenAAccount" in value;
    isInstance = isInstance && "tokenBAccount" in value;
    isInstance = isInstance && "pair" in value;

    return isInstance;
}

export function TokenSwapFromJSON(json: any): TokenSwap {
    return TokenSwapFromJSONTyped(json, false);
}

export function TokenSwapFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenSwap {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pubkey': json['pubkey'],
        'mint': json['mint'],
        'authority': json['authority'],
        'feeAccount': json['feeAccount'],
        'tokenAAccount': json['tokenAAccount'],
        'tokenBAccount': json['tokenBAccount'],
        'pair': json['pair'],
    };
}

export function TokenSwapToJSON(value?: TokenSwap | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pubkey': value.pubkey,
        'mint': value.mint,
        'authority': value.authority,
        'feeAccount': value.feeAccount,
        'tokenAAccount': value.tokenAAccount,
        'tokenBAccount': value.tokenBAccount,
        'pair': value.pair,
    };
}

