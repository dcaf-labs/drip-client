/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// OrcaWhirlpoolConfigAllOf struct for OrcaWhirlpoolConfigAllOf
type OrcaWhirlpoolConfigAllOf struct {
	Whirlpool string `json:"whirlpool"`
	TokenVaultA string `json:"tokenVaultA"`
	TokenVaultB string `json:"tokenVaultB"`
	Oracle string `json:"oracle"`
}

// NewOrcaWhirlpoolConfigAllOf instantiates a new OrcaWhirlpoolConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrcaWhirlpoolConfigAllOf(whirlpool string, tokenVaultA string, tokenVaultB string, oracle string) *OrcaWhirlpoolConfigAllOf {
	this := OrcaWhirlpoolConfigAllOf{}
	this.Whirlpool = whirlpool
	this.TokenVaultA = tokenVaultA
	this.TokenVaultB = tokenVaultB
	this.Oracle = oracle
	return &this
}

// NewOrcaWhirlpoolConfigAllOfWithDefaults instantiates a new OrcaWhirlpoolConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrcaWhirlpoolConfigAllOfWithDefaults() *OrcaWhirlpoolConfigAllOf {
	this := OrcaWhirlpoolConfigAllOf{}
	return &this
}

// GetWhirlpool returns the Whirlpool field value
func (o *OrcaWhirlpoolConfigAllOf) GetWhirlpool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Whirlpool
}

// GetWhirlpoolOk returns a tuple with the Whirlpool field value
// and a boolean to check if the value has been set.
func (o *OrcaWhirlpoolConfigAllOf) GetWhirlpoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Whirlpool, true
}

// SetWhirlpool sets field value
func (o *OrcaWhirlpoolConfigAllOf) SetWhirlpool(v string) {
	o.Whirlpool = v
}

// GetTokenVaultA returns the TokenVaultA field value
func (o *OrcaWhirlpoolConfigAllOf) GetTokenVaultA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenVaultA
}

// GetTokenVaultAOk returns a tuple with the TokenVaultA field value
// and a boolean to check if the value has been set.
func (o *OrcaWhirlpoolConfigAllOf) GetTokenVaultAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenVaultA, true
}

// SetTokenVaultA sets field value
func (o *OrcaWhirlpoolConfigAllOf) SetTokenVaultA(v string) {
	o.TokenVaultA = v
}

// GetTokenVaultB returns the TokenVaultB field value
func (o *OrcaWhirlpoolConfigAllOf) GetTokenVaultB() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenVaultB
}

// GetTokenVaultBOk returns a tuple with the TokenVaultB field value
// and a boolean to check if the value has been set.
func (o *OrcaWhirlpoolConfigAllOf) GetTokenVaultBOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenVaultB, true
}

// SetTokenVaultB sets field value
func (o *OrcaWhirlpoolConfigAllOf) SetTokenVaultB(v string) {
	o.TokenVaultB = v
}

// GetOracle returns the Oracle field value
func (o *OrcaWhirlpoolConfigAllOf) GetOracle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Oracle
}

// GetOracleOk returns a tuple with the Oracle field value
// and a boolean to check if the value has been set.
func (o *OrcaWhirlpoolConfigAllOf) GetOracleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oracle, true
}

// SetOracle sets field value
func (o *OrcaWhirlpoolConfigAllOf) SetOracle(v string) {
	o.Oracle = v
}

func (o OrcaWhirlpoolConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["whirlpool"] = o.Whirlpool
	}
	if true {
		toSerialize["tokenVaultA"] = o.TokenVaultA
	}
	if true {
		toSerialize["tokenVaultB"] = o.TokenVaultB
	}
	if true {
		toSerialize["oracle"] = o.Oracle
	}
	return json.Marshal(toSerialize)
}

type NullableOrcaWhirlpoolConfigAllOf struct {
	value *OrcaWhirlpoolConfigAllOf
	isSet bool
}

func (v NullableOrcaWhirlpoolConfigAllOf) Get() *OrcaWhirlpoolConfigAllOf {
	return v.value
}

func (v *NullableOrcaWhirlpoolConfigAllOf) Set(val *OrcaWhirlpoolConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOrcaWhirlpoolConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOrcaWhirlpoolConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrcaWhirlpoolConfigAllOf(val *OrcaWhirlpoolConfigAllOf) *NullableOrcaWhirlpoolConfigAllOf {
	return &NullableOrcaWhirlpoolConfigAllOf{value: val, isSet: true}
}

func (v NullableOrcaWhirlpoolConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrcaWhirlpoolConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


