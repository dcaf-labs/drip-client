/* tslint:disable */
/* eslint-disable */
/**
 * Drip Backend
 * Drip backend service. All API\'s have a IP rate limit of 10 requests per second. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mocha@dcaf.so
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SplTokenSwapConfig
 */
export interface SplTokenSwapConfig {
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    vault: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    vaultProtoConfig: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    vaultTokenAAccount: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    vaultTokenBAccount: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    tokenAMint: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    tokenBMint: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    oracleConfig?: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swapTokenMint: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swapTokenAAccount: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swapTokenBAccount: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swapFeeAccount: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swapAuthority: string;
    /**
     * 
     * @type {string}
     * @memberof SplTokenSwapConfig
     */
    swap: string;
}

/**
 * Check if a given object implements the SplTokenSwapConfig interface.
 */
export function instanceOfSplTokenSwapConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "vault" in value;
    isInstance = isInstance && "vaultProtoConfig" in value;
    isInstance = isInstance && "vaultTokenAAccount" in value;
    isInstance = isInstance && "vaultTokenBAccount" in value;
    isInstance = isInstance && "tokenAMint" in value;
    isInstance = isInstance && "tokenBMint" in value;
    isInstance = isInstance && "swapTokenMint" in value;
    isInstance = isInstance && "swapTokenAAccount" in value;
    isInstance = isInstance && "swapTokenBAccount" in value;
    isInstance = isInstance && "swapFeeAccount" in value;
    isInstance = isInstance && "swapAuthority" in value;
    isInstance = isInstance && "swap" in value;

    return isInstance;
}

export function SplTokenSwapConfigFromJSON(json: any): SplTokenSwapConfig {
    return SplTokenSwapConfigFromJSONTyped(json, false);
}

export function SplTokenSwapConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SplTokenSwapConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'vault': json['vault'],
        'vaultProtoConfig': json['vaultProtoConfig'],
        'vaultTokenAAccount': json['vaultTokenAAccount'],
        'vaultTokenBAccount': json['vaultTokenBAccount'],
        'tokenAMint': json['tokenAMint'],
        'tokenBMint': json['tokenBMint'],
        'oracleConfig': !exists(json, 'oracleConfig') ? undefined : json['oracleConfig'],
        'swapTokenMint': json['swapTokenMint'],
        'swapTokenAAccount': json['swapTokenAAccount'],
        'swapTokenBAccount': json['swapTokenBAccount'],
        'swapFeeAccount': json['swapFeeAccount'],
        'swapAuthority': json['swapAuthority'],
        'swap': json['swap'],
    };
}

export function SplTokenSwapConfigToJSON(value?: SplTokenSwapConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'vault': value.vault,
        'vaultProtoConfig': value.vaultProtoConfig,
        'vaultTokenAAccount': value.vaultTokenAAccount,
        'vaultTokenBAccount': value.vaultTokenBAccount,
        'tokenAMint': value.tokenAMint,
        'tokenBMint': value.tokenBMint,
        'oracleConfig': value.oracleConfig,
        'swapTokenMint': value.swapTokenMint,
        'swapTokenAAccount': value.swapTokenAAccount,
        'swapTokenBAccount': value.swapTokenBAccount,
        'swapFeeAccount': value.swapFeeAccount,
        'swapAuthority': value.swapAuthority,
        'swap': value.swap,
    };
}

