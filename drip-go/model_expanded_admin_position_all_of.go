/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// ExpandedAdminPositionAllOf struct for ExpandedAdminPositionAllOf
type ExpandedAdminPositionAllOf struct {
	Vault *Vault `json:"vault,omitempty"`
	ProtoConfig *ProtoConfig `json:"protoConfig,omitempty"`
	TokenA *Token `json:"tokenA,omitempty"`
	TokenB *Token `json:"tokenB,omitempty"`
}

// NewExpandedAdminPositionAllOf instantiates a new ExpandedAdminPositionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandedAdminPositionAllOf() *ExpandedAdminPositionAllOf {
	this := ExpandedAdminPositionAllOf{}
	return &this
}

// NewExpandedAdminPositionAllOfWithDefaults instantiates a new ExpandedAdminPositionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandedAdminPositionAllOfWithDefaults() *ExpandedAdminPositionAllOf {
	this := ExpandedAdminPositionAllOf{}
	return &this
}

// GetVault returns the Vault field value if set, zero value otherwise.
func (o *ExpandedAdminPositionAllOf) GetVault() Vault {
	if o == nil || isNil(o.Vault) {
		var ret Vault
		return ret
	}
	return *o.Vault
}

// GetVaultOk returns a tuple with the Vault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminPositionAllOf) GetVaultOk() (*Vault, bool) {
	if o == nil || isNil(o.Vault) {
    return nil, false
	}
	return o.Vault, true
}

// HasVault returns a boolean if a field has been set.
func (o *ExpandedAdminPositionAllOf) HasVault() bool {
	if o != nil && !isNil(o.Vault) {
		return true
	}

	return false
}

// SetVault gets a reference to the given Vault and assigns it to the Vault field.
func (o *ExpandedAdminPositionAllOf) SetVault(v Vault) {
	o.Vault = &v
}

// GetProtoConfig returns the ProtoConfig field value if set, zero value otherwise.
func (o *ExpandedAdminPositionAllOf) GetProtoConfig() ProtoConfig {
	if o == nil || isNil(o.ProtoConfig) {
		var ret ProtoConfig
		return ret
	}
	return *o.ProtoConfig
}

// GetProtoConfigOk returns a tuple with the ProtoConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminPositionAllOf) GetProtoConfigOk() (*ProtoConfig, bool) {
	if o == nil || isNil(o.ProtoConfig) {
    return nil, false
	}
	return o.ProtoConfig, true
}

// HasProtoConfig returns a boolean if a field has been set.
func (o *ExpandedAdminPositionAllOf) HasProtoConfig() bool {
	if o != nil && !isNil(o.ProtoConfig) {
		return true
	}

	return false
}

// SetProtoConfig gets a reference to the given ProtoConfig and assigns it to the ProtoConfig field.
func (o *ExpandedAdminPositionAllOf) SetProtoConfig(v ProtoConfig) {
	o.ProtoConfig = &v
}

// GetTokenA returns the TokenA field value if set, zero value otherwise.
func (o *ExpandedAdminPositionAllOf) GetTokenA() Token {
	if o == nil || isNil(o.TokenA) {
		var ret Token
		return ret
	}
	return *o.TokenA
}

// GetTokenAOk returns a tuple with the TokenA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminPositionAllOf) GetTokenAOk() (*Token, bool) {
	if o == nil || isNil(o.TokenA) {
    return nil, false
	}
	return o.TokenA, true
}

// HasTokenA returns a boolean if a field has been set.
func (o *ExpandedAdminPositionAllOf) HasTokenA() bool {
	if o != nil && !isNil(o.TokenA) {
		return true
	}

	return false
}

// SetTokenA gets a reference to the given Token and assigns it to the TokenA field.
func (o *ExpandedAdminPositionAllOf) SetTokenA(v Token) {
	o.TokenA = &v
}

// GetTokenB returns the TokenB field value if set, zero value otherwise.
func (o *ExpandedAdminPositionAllOf) GetTokenB() Token {
	if o == nil || isNil(o.TokenB) {
		var ret Token
		return ret
	}
	return *o.TokenB
}

// GetTokenBOk returns a tuple with the TokenB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminPositionAllOf) GetTokenBOk() (*Token, bool) {
	if o == nil || isNil(o.TokenB) {
    return nil, false
	}
	return o.TokenB, true
}

// HasTokenB returns a boolean if a field has been set.
func (o *ExpandedAdminPositionAllOf) HasTokenB() bool {
	if o != nil && !isNil(o.TokenB) {
		return true
	}

	return false
}

// SetTokenB gets a reference to the given Token and assigns it to the TokenB field.
func (o *ExpandedAdminPositionAllOf) SetTokenB(v Token) {
	o.TokenB = &v
}

func (o ExpandedAdminPositionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Vault) {
		toSerialize["vault"] = o.Vault
	}
	if !isNil(o.ProtoConfig) {
		toSerialize["protoConfig"] = o.ProtoConfig
	}
	if !isNil(o.TokenA) {
		toSerialize["tokenA"] = o.TokenA
	}
	if !isNil(o.TokenB) {
		toSerialize["tokenB"] = o.TokenB
	}
	return json.Marshal(toSerialize)
}

type NullableExpandedAdminPositionAllOf struct {
	value *ExpandedAdminPositionAllOf
	isSet bool
}

func (v NullableExpandedAdminPositionAllOf) Get() *ExpandedAdminPositionAllOf {
	return v.value
}

func (v *NullableExpandedAdminPositionAllOf) Set(val *ExpandedAdminPositionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandedAdminPositionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandedAdminPositionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandedAdminPositionAllOf(val *ExpandedAdminPositionAllOf) *NullableExpandedAdminPositionAllOf {
	return &NullableExpandedAdminPositionAllOf{value: val, isSet: true}
}

func (v NullableExpandedAdminPositionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandedAdminPositionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


