/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// ActiveWallet struct for ActiveWallet
type ActiveWallet struct {
	Owner string `json:"owner"`
	PositionCount int32 `json:"positionCount"`
}

// NewActiveWallet instantiates a new ActiveWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveWallet(owner string, positionCount int32) *ActiveWallet {
	this := ActiveWallet{}
	this.Owner = owner
	this.PositionCount = positionCount
	return &this
}

// NewActiveWalletWithDefaults instantiates a new ActiveWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveWalletWithDefaults() *ActiveWallet {
	this := ActiveWallet{}
	return &this
}

// GetOwner returns the Owner field value
func (o *ActiveWallet) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ActiveWallet) GetOwnerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ActiveWallet) SetOwner(v string) {
	o.Owner = v
}

// GetPositionCount returns the PositionCount field value
func (o *ActiveWallet) GetPositionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PositionCount
}

// GetPositionCountOk returns a tuple with the PositionCount field value
// and a boolean to check if the value has been set.
func (o *ActiveWallet) GetPositionCountOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PositionCount, true
}

// SetPositionCount sets field value
func (o *ActiveWallet) SetPositionCount(v int32) {
	o.PositionCount = v
}

func (o ActiveWallet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["positionCount"] = o.PositionCount
	}
	return json.Marshal(toSerialize)
}

type NullableActiveWallet struct {
	value *ActiveWallet
	isSet bool
}

func (v NullableActiveWallet) Get() *ActiveWallet {
	return v.value
}

func (v *NullableActiveWallet) Set(val *ActiveWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveWallet(val *ActiveWallet) *NullableActiveWallet {
	return &NullableActiveWallet{value: val, isSet: true}
}

func (v NullableActiveWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


