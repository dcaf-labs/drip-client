/* tslint:disable */
/* eslint-disable */
/**
 * Drip Backend
 * Drip backend service. All API\'s have a IP rate limit of 10 requests per second. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mocha@dcaf.so
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProtoConfig } from './ProtoConfig';
import {
    ProtoConfigFromJSON,
    ProtoConfigFromJSONTyped,
    ProtoConfigToJSON,
} from './ProtoConfig';
import type { Token } from './Token';
import {
    TokenFromJSON,
    TokenFromJSONTyped,
    TokenToJSON,
} from './Token';
import type { Vault } from './Vault';
import {
    VaultFromJSON,
    VaultFromJSONTyped,
    VaultToJSON,
} from './Vault';

/**
 * Get Position with Expanded Data
 * @export
 * @interface ExpandedAdminPosition
 */
export interface ExpandedAdminPosition {
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    pubkey: string;
    /**
     * 
     * @type {Vault}
     * @memberof ExpandedAdminPosition
     */
    vault: Vault;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    authority: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    depositedTokenAAmount: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    withdrawnTokenBAmount: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    depositTimestamp: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    dcaPeriodIdBeforeDeposit: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    numberOfSwaps: string;
    /**
     * 
     * @type {string}
     * @memberof ExpandedAdminPosition
     */
    periodicDripAmount: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExpandedAdminPosition
     */
    isClosed: boolean;
    /**
     * 
     * @type {ProtoConfig}
     * @memberof ExpandedAdminPosition
     */
    protoConfig?: ProtoConfig;
    /**
     * 
     * @type {Token}
     * @memberof ExpandedAdminPosition
     */
    tokenA?: Token;
    /**
     * 
     * @type {Token}
     * @memberof ExpandedAdminPosition
     */
    tokenB?: Token;
}

/**
 * Check if a given object implements the ExpandedAdminPosition interface.
 */
export function instanceOfExpandedAdminPosition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pubkey" in value;
    isInstance = isInstance && "vault" in value;
    isInstance = isInstance && "authority" in value;
    isInstance = isInstance && "depositedTokenAAmount" in value;
    isInstance = isInstance && "withdrawnTokenBAmount" in value;
    isInstance = isInstance && "depositTimestamp" in value;
    isInstance = isInstance && "dcaPeriodIdBeforeDeposit" in value;
    isInstance = isInstance && "numberOfSwaps" in value;
    isInstance = isInstance && "periodicDripAmount" in value;
    isInstance = isInstance && "isClosed" in value;

    return isInstance;
}

export function ExpandedAdminPositionFromJSON(json: any): ExpandedAdminPosition {
    return ExpandedAdminPositionFromJSONTyped(json, false);
}

export function ExpandedAdminPositionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpandedAdminPosition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pubkey': json['pubkey'],
        'vault': VaultFromJSON(json['vault']),
        'authority': json['authority'],
        'depositedTokenAAmount': json['depositedTokenAAmount'],
        'withdrawnTokenBAmount': json['withdrawnTokenBAmount'],
        'depositTimestamp': json['depositTimestamp'],
        'dcaPeriodIdBeforeDeposit': json['dcaPeriodIdBeforeDeposit'],
        'numberOfSwaps': json['numberOfSwaps'],
        'periodicDripAmount': json['periodicDripAmount'],
        'isClosed': json['isClosed'],
        'protoConfig': !exists(json, 'protoConfig') ? undefined : ProtoConfigFromJSON(json['protoConfig']),
        'tokenA': !exists(json, 'tokenA') ? undefined : TokenFromJSON(json['tokenA']),
        'tokenB': !exists(json, 'tokenB') ? undefined : TokenFromJSON(json['tokenB']),
    };
}

export function ExpandedAdminPositionToJSON(value?: ExpandedAdminPosition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pubkey': value.pubkey,
        'vault': VaultToJSON(value.vault),
        'authority': value.authority,
        'depositedTokenAAmount': value.depositedTokenAAmount,
        'withdrawnTokenBAmount': value.withdrawnTokenBAmount,
        'depositTimestamp': value.depositTimestamp,
        'dcaPeriodIdBeforeDeposit': value.dcaPeriodIdBeforeDeposit,
        'numberOfSwaps': value.numberOfSwaps,
        'periodicDripAmount': value.periodicDripAmount,
        'isClosed': value.isClosed,
        'protoConfig': ProtoConfigToJSON(value.protoConfig),
        'tokenA': TokenToJSON(value.tokenA),
        'tokenB': TokenToJSON(value.tokenB),
    };
}

